var documenterSearchIndex = {"docs":
[{"location":"index.html#API-/-Function-References","page":"Home","title":"API / Function References","text":"","category":"section"},{"location":"index.html#Calculating-Model-Input-Features","page":"Home","title":"Calculating Model Input Features","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"calculate_features(::String, ::String, ::String, ::Bool)\ncalculate_features(::String, ::Vector{String}, ::Vector{Matrix{Union{Missing, Float64}}}, ::String, ::Bool)\nsplit_training_testing!\ntrain_model(::String, ::String)","category":"page"},{"location":"index.html#RadarQC.calculate_features-Tuple{String, String, String, Bool}","page":"Home","title":"RadarQC.calculate_features","text":"Function to process a set of cfradial files and produce input features for training/evaluating a model \n\nRequired arguments\n\ninput_loc::String\n\nPath to input cfradial or directory of input cfradials \n\nargument_file::String\n\nPath to configuration file containing which features to calculate \n\noutput_file::String\n\nPath to output calculated features to (generally ends in .h5)\n\nHAS_MANUAL_QC::Bool\n\nSpecifies whether or not the file(s) have already undergone a manual QC procedure.  If true, function will also output a Y array used to verify where manual QC removed gates. This array is formed by considering where gates with non-missing data in raw scans (specified by remove_variable) are set to missing after QC is performed. \n\nOptional keyword arguments\n\nverbose::Bool\n\nIf true, will print out timing information as each file is processed \n\nREMOVE_LOW_NCP::Bool\n\nIf true, will ignore gates with Normalized Coherent Power/Signal Quality Index below a threshold specified in RQCFeatures.jl\n\nREMOVE_HIGH_PGG::Bool\n\nIf true, will ignore gates with Probability of Ground Gate (PGG) values at or above a threshold specified in RQCFeatures.jl \n\nQC_variable::String\n\nName of variable in input NetCDF files that has been quality-controlled. \n\nremove_variable::String\n\nName of a raw variable in input NetCDF files. Used to determine where missing data exists in the input sweeps.  Data at these locations will be removed from the outputted features. \n\nreplace_missing \n\nWhether or not to replace MISSING values with FILL_VAL in spatial parameter calculations Default value: False \n\n\n\n\n\n","category":"method"},{"location":"index.html#RadarQC.calculate_features-Tuple{String, Vector{String}, Vector{Matrix{Union{Missing, Float64}}}, String, Bool}","page":"Home","title":"RadarQC.calculate_features","text":"Function to process a set of cfradial files and produce input features for training/evaluating a model.      Allows for user-specified tasks and weight matrices, otherwise the same as above.  \n\nRequired arguments\n\ninput_loc::String\n\nPath to input cfradial or directory of input cfradials \n\ntasks::Vector{String}\n\nVector containing the features to be calculated for each cfradial. Example [DBZ, ISO(DBZ)]\n\nweight_matrixes::Vector{Matrix{Union{Missing, Float64}}}\n\nFor each task, a weight matrix specifying how much each gate in a spatial calculation will be given.  Required to be the same size as tasks\n\noutput_file::String \n\nLocation to output the calculated feature data to. \n\nHAS_MANUAL_QC::Bool\n\nSpecifies whether or not the file(s) have already undergone a manual QC procedure.  If true, function will also output a Y array used to verify where manual QC removed gates. This array is formed by considering where gates with non-missing data in raw scans (specified by remove_variable) are set to missing after QC is performed. \n\nOptional keyword arguments\n\nverbose::Bool\n\nIf true, will print out timing information as each file is processed \n\nREMOVE_LOW_NCP::Bool\n\nIf true, will ignore gates with Normalized Coherent Power/Signal Quality Index below a threshold specified in RQCFeatures.jl\n\nREMOVE_HIGH_PGG::Bool\n\nIf true, will ignore gates with Probability of Ground Gate (PGG) values at or above a threshold specified in RQCFeatures.jl \n\nQC_variable::String\n\nName of variable in input NetCDF files that has been quality-controlled. \n\nremove_variable::String\n\nName of a raw variable in input NetCDF files. Used to determine where missing data exists in the input sweeps.  Data at these locations will be removed from the outputted features. \n\nreplace_missing \n\nWhether or not to replace MISSING values with FILL_VAL in spatial parameter calculations Default value: False \n\n\n\n\n\n","category":"method"},{"location":"index.html#RadarQC.split_training_testing!","page":"Home","title":"RadarQC.split_training_testing!","text":"Function to split a given directory or set of directories into training and testing files using the configuration described in DesRosiers and Bell 2023. This function assumes that input directories only contain cfradial files  that follow standard naming conventions, and are thus implicitly chronologically ordered. The function operates  by first dividing file names into training and testing sets following an 80/20 training/testing split, and subsequently softlinking each file to the training and testing directories. Attempts to avoid temporal autocorrelation while maximizing  variance by dividing each case into several different training/testing sections. \n\nRequired Arguments:\n\nDIR_PATHS::Vector{String}\n\nList of directories containing cfradials to be used for model training/testing. Useful if input data is split  into several different cases. \n\nTRAINING_PATH::String \n\nDirectory to softlink files designated for training into. \n\nTESTING_PATH::String \n\nDirectory to softlink files designated for testing into. \n\n\n\n\n\n","category":"function"},{"location":"index.html#RadarQC.train_model-Tuple{String, String}","page":"Home","title":"RadarQC.train_model","text":"Function to train a random forest model using a precalculated set of input and output features (usually output from  calculate_features). Returns nothing. \n\nRequired arguments\n\ninput_h5::String\n\nLocation of input features/targets. Input features are expected to have the name \"X\", and targets the name \"Y\". This should be  taken care of automatically if they are outputs from calculate_features\n\nmodel_location::String \n\nPath to save the trained model out to. Typically should end in .joblib\n\nOptional keyword arguments\n\nverify::Bool = false \n\nWhether or not to output a separate .h5 file containing the trained models predictions on the training set  (Y_PREDICTED) as well as the targets for the training set (Y_ACTUAL) \n\nverify_out::String=\"model_verification.h5\"\n\nIf verify, the location to output this verification to. \n\n\n\n\n\n","category":"method"},{"location":"index.html#Applying-and-evaluating-a-trained-model-to-data","page":"Home","title":"Applying and evaluating a trained model to data","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"QC_scan\npredict_with_model(::String, ::String)\nevaluate_model(::String, ::String, ::String)","category":"page"},{"location":"index.html#RadarQC.QC_scan","page":"Home","title":"RadarQC.QC_scan","text":"Primary function to apply a trained RF model to certain raw fields of a cfradial scan. Values determined to be  non-meteorological by the RF model will be replaced with Missing\n\nRequired Arguments\n\nfile_path::String \n\nLocation of input cfradial or directory of cfradials one wishes to apply QC to \n\nconfig_file_path::String \n\nLocation of config file containing features to calculate as inputs to RF model \n\nmodel_path::String \n\nLocation of trained RF model (in joblib file format) \n\nOptional Arguments\n\nVARIABLES_TO_QC::Vector{String}\n\nList containing names of raw variables in the CFRadial to apply QC algorithm to. \n\nQC_suffix::String = \"_QC\"\n\nUsed for naming the QC-ed variables in the modified CFRadial file. Field name will be QCsuffix appended to the raw field.  Example: `DBZQC`\n\nindexer_var::String = \"VV\"\n\nVariable used to determine what gates are considered \"missing\" in the raw moments. QC will not  be applied to these gates, they will simply remain missing. \n\n\n\n\n\n","category":"function"},{"location":"index.html#RadarQC.predict_with_model-Tuple{String, String}","page":"Home","title":"RadarQC.predict_with_model","text":"Simple function that opens a given h5 file with feature data and applies a specific model to it.  Returns a tuple of predictions, targets. \n\nRequired arguments\n\nmodel_path::String \n\nLocation of trained RF model (saved in joblib file format) \n\ninput_h5::String \n\nLocation of h5 file containing input features. \n\n\n\n\n\n","category":"method"},{"location":"index.html#RadarQC.evaluate_model-Tuple{String, String, String}","page":"Home","title":"RadarQC.evaluate_model","text":"Function that takes in a given model, directory containing either cfradials or an already processed h5 file,  a path to the configuration file, and a mode type (\"C\" for cfradials \"H\" for h5) and returns a Julia DataFrame  containing a variety of metrics about the model's performance on the specified set, including precision and recall scores. \n\nRequired arguments\n\nmodel_path::String\n\nPath to input trained random forest model\n\ninput_file_dir::String\n\nPath to input h5 file or directory of cfradial files to be processed\n\nconfig_file_path \n\nPath to configuration file containing information about what features to calculate \n\nOptional Arguments\n\nmode::String = \"C\"\n\nWhether to process a directory of cfradial files (\"C\" mode) or simply utilize an already-processed h5 file (\"H\" mode) \n\nwrite_out::Bool = false\n\nIf in \"C\" mode, whether or not to write the resulting calculated features out to a file \n\noutput_file::String = \"_.h5\" \n\nLocation to write calculated output features to. \n\nAlso contains all keyword arguments for calculate_features \n\n\n\n\n\n","category":"method"},{"location":"index.html#Non-user-facing","page":"Home","title":"Non-user facing","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"get_task_params\nprocess_single_file","category":"page"},{"location":"index.html#RadarQC.get_task_params","page":"Home","title":"RadarQC.get_task_params","text":"Function to parse a given task list Also performs checks to ensure that the specified  tasks are able to be performed to the specified CFRad file\n\n\n\n\n\n","category":"function"},{"location":"index.html#RadarQC.process_single_file","page":"Home","title":"RadarQC.process_single_file","text":"Driver function that calculates a set of features from a single CFRadial file. Features are \nspecified in file located at argfile_path. \n\nIMPLICITLY specifies weight matrixes (already in calc function args) \n\nIf the file has already been manually QCed, set\nHAS_MANUAL_QC to true, and an additional Y array will be returned containing \"1\" if a datapoint\nwas retained in manual QC and \"0\" if it was removed. \nNOTE ARGUMENTS remove_variable and QC_variable . The gates retained after manual QC will be obtained \nby determining which are present in remove_variable but are NOT PRESENT in QC_variable \n    \nAlso included are flags to remove datapoints \nwith low Normalized Coherent Power (NCP) and high Probability of Ground (PGG). Finally, the \nremove_variable argument specifies which field will be used to determine where \"missing\" data exists \nand will subsequently be removed from the returned dataset. \n\nReturns: \n    -X: Array that is dimensioned (num_gates x num_features) where num_gates is the number of valid \n        (non-missing, meeting NCP/PGG thresholds) the function finds, and num_features is the \n        number of features specified in the argument file to calculate. \n\n    -Y: IF HAS_MANUAL_QC == true, will return Y, array containing 1 if a datapoint was retained \n        during manual QC, and 0 otherwise. \n\n    -INDEXER: Based on remove_variable as described above, contains boolean array specifiying\n              where in the scan features valid data and where does not.\n\n\n\n\n\n","category":"function"}]
}
