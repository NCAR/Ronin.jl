var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"<h1> API / Function References </h1> <h2>Calculating Model Input Features</h2>","category":"page"},{"location":"","page":"Home","title":"Home","text":"process_single_file\nQC_scan\nget_task_params\ncalculate_features(::String, ::Vector{String}, ::Vector{Matrix{Union{Missing, Float64}}}, ::String, ::Bool)\ncalculate_features(::String, ::String, ::String, ::Bool)\nsplit_training_testing!","category":"page"},{"location":"#RadarQC.process_single_file","page":"Home","title":"RadarQC.process_single_file","text":"Driver function that calculates a set of features from a single CFRadial file. Features are \nspecified in file located at argfile_path. \n\nIMPLICITLY specifies weight matrixes (already in calc function args) \n\nIf the file has already been manually QCed, set\nHAS_MANUAL_QC to true, and an additional Y array will be returned containing \"1\" if a datapoint\nwas retained in manual QC and \"0\" if it was removed. \nNOTE ARGUMENTS remove_variable and QC_variable . The gates retained after manual QC will be obtained \nby determining which are present in remove_variable but are NOT PRESENT in QC_variable \n    \nAlso included are flags to remove datapoints \nwith low Normalized Coherent Power (NCP) and high Probability of Ground (PGG). Finally, the \nremove_variable argument specifies which field will be used to determine where \"missing\" data exists \nand will subsequently be removed from the returned dataset. \n\nReturns: \n    -X: Array that is dimensioned (num_gates x num_features) where num_gates is the number of valid \n        (non-missing, meeting NCP/PGG thresholds) the function finds, and num_features is the \n        number of features specified in the argument file to calculate. \n\n    -Y: IF HAS_MANUAL_QC == true, will return Y, array containing 1 if a datapoint was retained \n        during manual QC, and 0 otherwise. \n\n    -INDEXER: Based on remove_variable as described above, contains boolean array specifiying\n              where in the scan features valid data and where does not.\n\n\n\n\n\n","category":"function"},{"location":"#RadarQC.QC_scan","page":"Home","title":"RadarQC.QC_scan","text":"Primary function to apply a trained RF model to a cfradial scan \n\n\n\n\n\n","category":"function"},{"location":"#RadarQC.get_task_params","page":"Home","title":"RadarQC.get_task_params","text":"Function to parse a given task list Also performs checks to ensure that the specified  tasks are able to be performed to the specified CFRad file\n\n\n\n\n\n","category":"function"},{"location":"#RadarQC.calculate_features-Tuple{String, Vector{String}, Vector{Matrix{Union{Missing, Float64}}}, String, Bool}","page":"Home","title":"RadarQC.calculate_features","text":"Function to process a set of cfradial files and produce a set of input features for training/evaluating a model      inputloc: cfradial files are specified by inputloc - can be either a file or a directory     tasks: Features to be calculated     weightmatrixes: Vector of matrixes that specify size and weights for each spatial variable     outputfile : Location to output the resulting dataset\n\nKeyword Arguments: \nremove_variable - variable in CFRadial file used to determine where 'missing' gates are. \n                  these gates will be removed from the outputted features so that the model \n                  is not trained on missing data\n\n\n\n\n\n","category":"method"},{"location":"#RadarQC.calculate_features-Tuple{String, String, String, Bool}","page":"Home","title":"RadarQC.calculate_features","text":"Function to process a set of cfradial files and produce input features for training/evaluating a model \n\nRequired arguments\n\ninput_loc::String\n\nPath to input cfradial or directory of input cfradials \n\nargument_file::String\n\nPath to configuration file containing which features to calculate \n\noutput_file::String\n\nPath to output calculated features to (generally ends in .h5)\n\nHAS_MANUAL_QC::Bool\n\nSpecifies whether or not the file(s) have already undergone a manual QC procedure.  If true, function will also output a Y array used to verify where manual QC removed gates. This array is formed by considering where gates with non-missing data in raw scans (specified by remove_variable) are set to missing after QC is performed. \n\nOptional keyword arguments\n\nverbose::Bool\n\nIf true, will print out timing information as each file is processed \n\nREMOVE_LOW_NCP::Bool\n\nIf true, will ignore gates with Normalized Coherent Power/Signal Quality Index below a threshold specified in RQCFeatures.jl\n\nREMOVE_HIGH_PGG::Bool\n\nIf true, will ignore gates with Probability of Ground Gate (PGG) values at or above a threshold specified in RQCFeatures.jl \n\nQC_variable::String\n\nName of variable in input NetCDF files that has been quality-controlled. \n\nremove_variable::String\n\nName of a raw variable in input NetCDF files. Used to determine where missing data exists in the input sweeps.  Data at these locations will be removed from the outputted features. \n\n\n\n\n\n","category":"method"},{"location":"#RadarQC.split_training_testing!","page":"Home","title":"RadarQC.split_training_testing!","text":"Function to split a given directory or set of directories into training and testing files using the configuration described in DesRosiers and Bell 2023 \n\nArguments:      DIRPATHS: Vector{String} consisting of directory or list of directories containing input CFRadial files      TRAININGPATH: String - path to directory where training files will be linked      TESTING_PATH: String - path to directory where testing files will be linked\n\nConfiguration info: 80/20 Training/Testing split, with testing cases taken from the beginning, middle, and end of      EACH case in DIR_PATHS. The function calculates a number of testing scans and divides it up amongst the cases,      so each case will be equally represented in the testing dataset. \n\nIn the example given in the paper, there are 4 cases, and an 80/20 split gives a total number of testing scans \nof 356. Divided by 4, this results in 89 scans from each case. \n\nDetails about rounding are contained within the function\n\nIMPORTANT: ASSUMES SCANS FOLLOW CFRAD NAMING CONVENTIONS AND ARE THEREFORE LISTED CHRONOLOGICALLY\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
